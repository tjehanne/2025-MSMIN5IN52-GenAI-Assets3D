#!/usr/bin/env python
# coding: utf-8

"""
Interface graphique Gradio pour la g√©n√©ration de mod√®les 3D
Permet de saisir un prompt et ajuster les param√®tres de qualit√©
"""

import os
import threading
import gradio as gr
from src.pipeline import text_to_3d_pipeline

# Fonction pour recharger les mod√®les disponibles (y compris les mod√®les personnalis√©s)
def get_available_models():
    """Recharge la liste des mod√®les disponibles"""
    from src.generate_image import load_custom_models, AVAILABLE_MODELS as BASE_MODELS
    
    models = dict(BASE_MODELS)
    models.update(load_custom_models())
    return models

# Charger les mod√®les au d√©marrage
STABLE_DIFFUSION_MODELS = get_available_models()

# Variable globale pour g√©rer l'interruption
generation_cancelled = False
generation_lock = threading.Lock()

def cancel_generation():
    """
    Fonction pour annuler la g√©n√©ration en cours
    """
    global generation_cancelled
    with generation_lock:
        generation_cancelled = True
    return "‚ö†Ô∏è **Annulation en cours...** La g√©n√©ration sera interrompue d√®s que possible."

def generate_3d_from_text(
    prompt,
    sd_model,
    image_steps,
    image_guidance,
    image_width,
    image_height,
    resolution_3d,
    save_format,
    render_video,
    apply_texture,
    progress=gr.Progress()
):
    """
    Fonction appel√©e par l'interface Gradio
    """
    global generation_cancelled
    
    # R√©initialiser le flag d'annulation
    with generation_lock:
        generation_cancelled = False
    
    if not prompt or prompt.strip() == "":
        return None, None, None, None, "‚ùå Veuillez entrer une description !"
    
    try:
        # V√©rifier l'annulation avant de commencer
        with generation_lock:
            if generation_cancelled:
                return None, None, None, None, "üõë **G√©n√©ration annul√©e par l'utilisateur**"
        
        progress(0.05, desc="üîÑ Initialisation...")
        
        # V√©rifier l'annulation
        with generation_lock:
            if generation_cancelled:
                return None, None, None, None, "üõë **G√©n√©ration annul√©e avant le d√©marrage**"
        
        progress(0.1, desc="üé® G√©n√©ration de l'image 2D...")
        
        # Convertir le nom du mod√®le en chemin
        model_path = STABLE_DIFFUSION_MODELS.get(sd_model, sd_model) if sd_model else None
        
        # V√©rifier l'annulation avant la g√©n√©ration
        with generation_lock:
            if generation_cancelled:
                return None, None, None, "üõë **G√©n√©ration annul√©e par l'utilisateur**"
        
        progress(0.2, desc="üé® Chargement du mod√®le d'IA...")
        
        # V√©rifier l'annulation
        with generation_lock:
            if generation_cancelled:
                return None, None, None, "üõë **G√©n√©ration annul√©e pendant le chargement**"
        
        progress(0.3, desc="üñºÔ∏è Cr√©ation de l'image 2D...")
        
        # G√©n√©rer le mod√®le 3D
        result = text_to_3d_pipeline(
            prompt=prompt.strip(),
            output_dir="output/gradio",
            image_steps=int(image_steps),
            image_guidance=float(image_guidance),
            image_width=int(image_width),
            image_height=int(image_height),
            model_3d_resolution=int(resolution_3d),
            save_format=save_format,
            render_video=render_video,
            sd_model=model_path,
            apply_texture=apply_texture
        )
        
        # V√©rifier l'annulation apr√®s la g√©n√©ration
        with generation_lock:
            if generation_cancelled:
                return None, None, None, None, "üõë **G√©n√©ration annul√©e par l'utilisateur**"
        
        progress(1.0, desc="‚úÖ Termin√© !")
        
        # Pr√©parer les fichiers de sortie
        image_path = result['image_path'] if os.path.exists(result['image_path']) else None
        mesh_path = result['mesh_path'] if os.path.exists(result['mesh_path']) else None
        video_path = result.get('video_path') if render_video and 'video_path' in result else None
        
        # Message de succ√®s
        message = f"""
‚úÖ **G√©n√©ration r√©ussie !**

üìù Prompt : {result['prompt']}
‚è±Ô∏è Temps total : {result['total_time']:.1f}s

üìÇ Fichiers g√©n√©r√©s :
- üì∏ Image 2D : {os.path.basename(image_path)}
- üé≤ Mod√®le 3D : {os.path.basename(mesh_path)}
{'- üé¨ Vid√©o : ' + os.path.basename(video_path) if video_path else ''}

üí° Utilisez le viewer 3D interactif ou t√©l√©chargez le mod√®le pour l'ouvrir dans Blender/MeshLab.
"""
        
        return image_path, mesh_path, mesh_path, video_path, message
        
    except Exception as e:
        import traceback
        error_msg = f"‚ùå **Erreur lors de la g√©n√©ration :**\n\n```\n{str(e)}\n```\n\n**D√©tails :**\n```\n{traceback.format_exc()}\n```"
        return None, None, None, None, error_msg


# Exemples de prompts
example_prompts = [
    ["a futuristic robot head, metallic chrome, detailed", "SD 1.4 (D√©faut)", 25, 7.5, 512, 512, 320, "obj", False],
    ["a dragon skull, ancient bone, fantasy art, detailed teeth", "SD 1.4 (D√©faut)", 25, 7.5, 512, 512, 320, "obj", False],
    ["a magical crystal ball on brass stand, glowing blue", "DreamShaper", 25, 7.5, 512, 512, 320, "obj", False],
    ["a medieval sword with runes, steel blade, ornate handle", "SD 1.5", 25, 7.5, 512, 768, 320, "obj", False],
    ["a steampunk clockwork mechanism, brass gears, intricate", "Realistic Vision", 30, 7.5, 512, 512, 384, "obj", False],
]

# Cr√©er l'interface Gradio
with gr.Blocks(title="G√©n√©rateur de Mod√®les 3D", theme=gr.themes.Soft()) as demo:
    gr.Markdown(
        """
        # üé® G√©n√©rateur de Mod√®les 3D avec IA
        
        Cr√©ez des mod√®les 3D √† partir de descriptions textuelles !
        
        **Comment √ßa marche :**
        1. üìù D√©crivez ce que vous voulez cr√©er
        2. üé≠ Choisissez le mod√®le Stable Diffusion (6 mod√®les disponibles)
        3. üìê Ajustez les dimensions de l'image (512x512, 768x768, etc.)
        4. ‚öôÔ∏è Ajustez les param√®tres de qualit√© (optionnel)
        5. üöÄ Cliquez sur "G√©n√©rer le mod√®le 3D"
        6. üõë Utilisez le bouton "Arr√™ter" si besoin
        7. ‚è≥ Attendez ~25-40 secondes
        8. üíæ T√©l√©chargez votre mod√®le 3D !
        
        **Nouvelles fonctionnalit√©s :**
        - ‚ú® **6 mod√®les Stable Diffusion** : SD 1.4, SD 1.5, SD 2.1, Realistic Vision, DreamShaper, Anything V5
        - üìè **Contr√¥le des dimensions** : Pr√©r√©glages ou personnalis√©s (256-1024px)
        - üõë **Bouton Stop** : Arr√™tez la g√©n√©ration √† tout moment
        - üîß **Support de mod√®les personnalis√©s** : Voir `docs/CUSTOM_MODELS.md`
        """
    )
    
    with gr.Row():
        with gr.Column(scale=1):
            gr.Markdown("### üìù Description")
            
            prompt_input = gr.Textbox(
                label="D√©crivez votre mod√®le 3D",
                placeholder="Ex: a futuristic robot head, metallic, detailed",
                lines=3,
                info="Soyez pr√©cis : mentionnez les mat√©riaux, le style, les d√©tails..."
            )
            
            gr.Markdown(
                """
                **üí° Conseils :**
                - Mentionnez les **mat√©riaux** : m√©tallique, bois, cristal...
                - Ajoutez un **style** : fantasy, sci-fi, r√©aliste...
                - Pr√©cisez les **d√©tails** : gravures, usure, brillance...
                """
            )
            
            gr.Markdown("### üé® Mod√®le de G√©n√©ration")
            
            # Bouton pour recharger les mod√®les
            reload_btn = gr.Button("üîÑ Recharger les mod√®les", size="sm", variant="secondary")
            
            sd_model_selector = gr.Dropdown(
                choices=list(STABLE_DIFFUSION_MODELS.keys()),
                value="SD 1.4 (D√©faut)",
                label="Mod√®le Stable Diffusion",
                info="Choisissez le mod√®le d'IA pour g√©n√©rer l'image (les mod√®les avec üì¶ sont personnalis√©s)"
            )
            
            def reload_models():
                """Recharge la liste des mod√®les disponibles"""
                global STABLE_DIFFUSION_MODELS
                STABLE_DIFFUSION_MODELS = get_available_models()
                return gr.Dropdown(choices=list(STABLE_DIFFUSION_MODELS.keys()))
            
            reload_btn.click(
                fn=reload_models,
                outputs=[sd_model_selector]
            )
            
            with gr.Accordion("‚ÑπÔ∏è Info sur les mod√®les", open=False):
                gr.Markdown(
                    """
                    - **SD 1.4/1.5** : Mod√®les standards, rapides, polyvalents
                    - **SD 2.1** : Meilleure qualit√©, plus de d√©tails
                    - **Realistic Vision** : Excellent pour le photor√©alisme
                    - **DreamShaper** : Bon √©quilibre artistique/r√©alisme
                    - **Anything V5** : Style anime/dessin
                    
                    üí° Vous pouvez aussi entrer un chemin local ou un mod√®le HuggingFace personnalis√© !
                    """
                )
            
            gr.Markdown("### ‚öôÔ∏è Param√®tres de Qualit√©")
            
            with gr.Accordion("Param√®tres avanc√©s", open=False):
                gr.Markdown("#### üñºÔ∏è Dimensions de l'image")
                
                with gr.Row():
                    image_width = gr.Slider(
                        minimum=256,
                        maximum=1024,
                        value=512,
                        step=64,
                        label="Largeur (pixels)",
                        info="Largeur de l'image g√©n√©r√©e (multiple de 64)"
                    )
                    
                    image_height = gr.Slider(
                        minimum=256,
                        maximum=1024,
                        value=512,
                        step=64,
                        label="Hauteur (pixels)",
                        info="Hauteur de l'image g√©n√©r√©e (multiple de 64)"
                    )
                
                # Boutons de presets de dimensions
                with gr.Row():
                    square_btn = gr.Button("‚¨õ Carr√© 512x512", size="sm")
                    portrait_btn = gr.Button("üì± Portrait 512x768", size="sm")
                    landscape_btn = gr.Button("üñºÔ∏è Paysage 768x512", size="sm")
                    hd_btn = gr.Button("üì∫ HD 768x768", size="sm")
                
                gr.Markdown("#### üé® Qualit√© de g√©n√©ration")
                
                image_steps = gr.Slider(
                    minimum=10,
                    maximum=50,
                    value=25,
                    step=5,
                    label="Qualit√© de l'image (steps)",
                    info="Plus = meilleure qualit√©, mais plus lent (10=rapide, 25=haute qualit√©, 50=maximum)"
                )
                
                image_guidance = gr.Slider(
                    minimum=5.0,
                    maximum=15.0,
                    value=7.5,
                    step=0.5,
                    label="üéØ Guidance (fid√©lit√© au prompt)",
                    info="7.5 = √©quilibr√©, plus √©lev√© = plus fid√®le au texte"
                )
                
                resolution_3d = gr.Slider(
                    minimum=128,
                    maximum=512,
                    value=320,
                    step=64,
                    label="üé≤ R√©solution du mod√®le 3D",
                    info="Plus = plus de d√©tails, mais plus lent (256=standard, 320=haute qualit√©, 384+=maximum)"
                )
                
                save_format = gr.Radio(
                    choices=["obj", "glb"],
                    value="obj",
                    label="üíæ Format de sortie",
                    info="OBJ = standard (Blender, MeshLab), GLB = compact (web)"
                )
                
                render_video = gr.Checkbox(
                    label="üé¨ G√©n√©rer une vid√©o de rendu (rotation 360¬∞)",
                    value=False,
                    info="Ajoute ~10-15 secondes au temps de g√©n√©ration"
                )
                
                apply_texture = gr.Checkbox(
                    label="üé® Appliquer la texture de l'image au mod√®le 3D",
                    value=True,
                    info="Utilise l'image g√©n√©r√©e comme texture sur le mod√®le 3D"
                )
            
            # Profils de qualit√© rapides
            gr.Markdown("### üéöÔ∏è Profils rapides")
            
            with gr.Row():
                fast_btn = gr.Button("‚ö° Rapide", size="sm")
                standard_btn = gr.Button("‚≠ê Standard", size="sm")
                quality_btn = gr.Button("üíé Haute Qualit√©", size="sm")
                max_btn = gr.Button("üèÜ Maximum", size="sm")
            
            with gr.Row():
                generate_btn = gr.Button("üöÄ G√©n√©rer le mod√®le 3D", variant="primary", size="lg", scale=3)
                cancel_btn = gr.Button("üõë Arr√™ter", variant="stop", size="lg", scale=1)
        
        with gr.Column(scale=1):
            gr.Markdown("### üìä R√©sultats")
            
            status_output = gr.Markdown("üí° **Pr√™t √† g√©n√©rer** - Entrez une description et cliquez sur 'G√©n√©rer'")
            
            gr.Markdown(
                """
                **üí° Astuce :** Vous pouvez arr√™ter la g√©n√©ration √† tout moment avec le bouton üõë **Arr√™ter**
                """
            )
            
            with gr.Tabs():
                with gr.Tab("üì∏ Image 2D"):
                    image_output = gr.Image(label="Image g√©n√©r√©e", type="filepath")
                
                with gr.Tab("üé≤ Viewer 3D Interactif"):
                    model_viewer = gr.Model3D(
                        label="Mod√®le 3D interactif",
                        clear_color=[0.1, 0.1, 0.1, 1.0],
                        camera_position=[90, 90, 3.5],
                        height=500
                    )
                    gr.Markdown(
                        """
                        **üñ±Ô∏è Contr√¥les :**
                        - **Rotation** : Clic gauche + glisser
                        - **Zoom** : Molette de la souris
                        - **Pan** : Clic droit + glisser
                        """
                    )
                
                with gr.Tab("üíæ T√©l√©chargement"):
                    mesh_output = gr.File(label="T√©l√©charger le mod√®le 3D")
                    gr.Markdown(
                        """
                        **Ouvrir avec :**
                        - [Blender](https://www.blender.org/) (gratuit, professionnel)
                        - [MeshLab](http://www.meshlab.net/) (gratuit, l√©ger)
                        - [3D Viewer en ligne](https://3dviewer.net/) (navigateur)
                        """
                    )
                
                with gr.Tab("üé¨ Vid√©o"):
                    video_output = gr.Video(label="Vid√©o de rendu (si activ√©e)")
    
    # Exemples
    gr.Markdown("### üé® Exemples")
    gr.Examples(
        examples=example_prompts,
        inputs=[prompt_input, sd_model_selector, image_steps, image_guidance, image_width, image_height, resolution_3d, save_format, render_video],
        label="Cliquez sur un exemple pour le charger"
    )
    
    # √âv√©nements des boutons de profil
    fast_btn.click(
        lambda: [10, 7.5, 512, 512, 192],
        outputs=[image_steps, image_guidance, image_width, image_height, resolution_3d]
    )
    
    standard_btn.click(
        lambda: [15, 7.5, 512, 512, 256],
        outputs=[image_steps, image_guidance, image_width, image_height, resolution_3d]
    )
    
    quality_btn.click(
        lambda: [25, 7.5, 512, 512, 320],
        outputs=[image_steps, image_guidance, image_width, image_height, resolution_3d]
    )
    
    max_btn.click(
        lambda: [35, 7.5, 768, 768, 384],
        outputs=[image_steps, image_guidance, image_width, image_height, resolution_3d]
    )
    
    # √âv√©nements des boutons de dimensions
    square_btn.click(
        lambda: [512, 512],
        outputs=[image_width, image_height]
    )
    
    portrait_btn.click(
        lambda: [512, 768],
        outputs=[image_width, image_height]
    )
    
    landscape_btn.click(
        lambda: [768, 512],
        outputs=[image_width, image_height]
    )
    
    hd_btn.click(
        lambda: [768, 768],
        outputs=[image_width, image_height]
    )
    
    # √âv√©nement de g√©n√©ration
    generate_event = generate_btn.click(
        fn=generate_3d_from_text,
        inputs=[
            prompt_input,
            sd_model_selector,
            image_steps,
            image_guidance,
            image_width,
            image_height,
            resolution_3d,
            save_format,
            render_video,
            apply_texture
        ],
        outputs=[image_output, mesh_output, model_viewer, video_output, status_output]
    )
    
    # √âv√©nement d'annulation
    cancel_btn.click(
        fn=cancel_generation,
        inputs=None,
        outputs=status_output,
        cancels=[generate_event]  # Annule l'√©v√©nement de g√©n√©ration en cours
    )
    
    gr.Markdown(
        """
        ---
        
        ### üìö Besoin d'aide ?
        
        - **üõë Arr√™ter** : Cliquez sur le bouton rouge pour annuler la g√©n√©ration en cours
        - Consultez `PROMPT_EXAMPLES.md` pour des exemples de descriptions
        - Voir `QUALITY_SETTINGS.md` pour comprendre les param√®tres
        - Lire `GUIDE_3D.md` pour le guide complet
        
        **‚ö†Ô∏è Note** : L'arr√™t de la g√©n√©ration peut prendre quelques secondes car l'IA termine l'√©tape en cours.
        **‚è±Ô∏è Temps estim√©s :**
        - Rapide : ~15s
        - Standard : ~20s  
        - Haute qualit√© : ~25s
        - Maximum : ~40s
        """
    )

if __name__ == "__main__":
    print("üöÄ Lancement de l'interface Gradio...")
    print("üì± Une fen√™tre de navigateur va s'ouvrir automatiquement")
    print("üåê Ou acc√©dez manuellement √† l'URL affich√©e ci-dessous\n")
    
    demo.launch(
        server_name="127.0.0.1",
        server_port=None,  # Trouve automatiquement un port libre
        share=False,
        inbrowser=True
    )
